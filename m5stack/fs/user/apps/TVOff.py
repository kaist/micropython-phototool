# MicroPython TV-B-Gone (EU set) for M5StickC Plus 2
# Auto-generated from Arduino-TV-B-Gone-1.3 and extended with LCD progress bar
from machine import Pin, PWM
import time
from array import array

# ====== User-configurable ======
IR_TX_PIN = 19      # ваш рабочий пин для ИК-светодиода
DUTY_ON   = 512     # 0..1023 на ESP32; можно снизить до 256..384 если есть наводки
UNIT_US   = 10      # базовая единица таймингов в микросекундах
INTER_CODE_DELAY_MS = 10

# На M5StickC / Plus / Plus2 буззер часто на 2 (иногда 25/26)
SPEAKER_PINS = (2,)

def mute_buzzer():
    """Отключить/заглушить встроенный буззер/динамик на известных пинах."""
    for p in SPEAKER_PINS:
        try:
            try:
                PWM(Pin(p)).deinit()
            except Exception:
                pass
            Pin(p, Pin.OUT, value=0)
        except Exception:
            pass

mute_buzzer()

# ==== LCD / progress bar helpers ====

from M5 import *


_PROG = None  # внутренняя структура прогресса

def _lcd_screensize():
    return (135, 240)

def _lcd_text(x, y, s, color):
    Lcd.setFont(Widgets.FONTS.DejaVu12)
    Lcd.setTextColor(0xffffff, 0x000000)
    w = Lcd.textWidth(s)           
    x = x
    y = y                         
    Lcd.drawString(s, x, y)

def progress_init(total, bg=0x000000, fg=0xFFFFFF):
    Lcd.fillRect(0, 31,135,240-31, bg)
    """Нарисовать панель прогресса по центру экрана."""
    global _PROG

    w, h = _lcd_screensize()
    bar_w = min(200, w - 40)
    bar_h = 18
    x = (w - bar_w) // 2
    y = (h - bar_h) // 2

    Lcd.fillRect(x-6, y-28, bar_w+12, bar_h+56, bg)   # подложка
    Lcd.drawRect(x-1, y-1, bar_w+2, bar_h+2, fg)          # рамка
    Lcd.fillRect(x, y, bar_w, bar_h, 0x202020)        # пустая полоска
    _lcd_text(x, y-20, "Sending IR...", fg)
    _PROG = {'x': x, 'y': y, 'w': bar_w, 'h': bar_h, 'total': total, 'bg': bg, 'fg': fg}

def progress_update(done, total=None):
    """Обновить прогресс (0..total)."""

    x = _PROG['x']; y = _PROG['y']; w = _PROG['w']; h = _PROG['h']
    fg = _PROG['fg']; bg = _PROG['bg']
    if total is None:
        total = _PROG['total']
    filled = int(w * done / max(1, total))
    try:
        Lcd.fillRect(x, y, w, h, 0x202020)   # очистить
        Lcd.fillRect(x, y, filled, h, fg)    # заполнить
        pct = int(100 * done / max(1, total))
        ty = y + h + 8
        Lcd.fillRect(x-2, ty-2, w+4, 18, bg) # зачистить область текста
        _lcd_text(x + w//2 - 16, ty, "{}%".format(pct), fg)
    except Exception:
        pass

def progress_finish(ok=True):
    Lcd.fillRect(0, 31,135,240-31, 0x000000)

    x = _PROG['x']; y = _PROG['y']; w = _PROG['w']; h = _PROG['h']
    fg = _PROG['fg']; bg = _PROG['bg']
    try:
        if ok:
            progress_update(_PROG['total'])
            _lcd_text(x + w//2 - 20, y-20, "Done", fg)
        else:
            _lcd_text(x + w//2 - 32, y-20, "Error", 0xFF4040)
        time.sleep_ms(400)
        lcd.fillRect(x-6, y-28, w+12, h+56, bg)
    except Exception:
        pass

# ====== Sending engine ======
class BitReader:
    def __init__(self, data):
        self.data = data
        self.pos = 0  # bit position
    def get(self, n):
        v = 0
        for _ in range(n):
            bi = self.pos >> 3
            bo = 7 - (self.pos & 7)
            v = (v << 1) | ((self.data[bi] >> bo) & 1)
            self.pos += 1
        return v

def send_ir_code(pwm, code):
    freq, numpairs, bpi, times, codes = code
    if freq > 0:
        pwm.freq(freq)
    br = BitReader(codes)
    duty_on = DUTY_ON
    for _ in range(numpairs):
        idx = br.get(bpi)
        on_us  = times[2*idx] * UNIT_US
        off_us = times[2*idx + 1] * UNIT_US
        pwm.duty(duty_on)
        t0 = time.ticks_us()
        # активный HIGH импульс
        while time.ticks_diff(time.ticks_us(), t0) < on_us:
            pass
        pwm.duty(0)
        if off_us > 0:
            time.sleep_us(off_us)

def send_all(progress_cb=None):
    total = len(EUCODES)
    if progress_cb:
        progress_cb(0, total)
    pwm = PWM(Pin(IR_TX_PIN), freq=38000, duty=0)
    try:
        for i, code in enumerate(EUCODES, 1):
            send_ir_code(pwm, code)
            if progress_cb:
                progress_cb(i, total)
            time.sleep_ms(INTER_CODE_DELAY_MS)
    finally:
        pwm.deinit()
        mute_buzzer()

# ====== Data (EU set only, с несколькими служебными t_na/b_na для таймингов) ======
t_eu000 = array('H', [43, 47, 43, 91, 43, 8324, 88, 47, 133, 133, 264, 90, 264, 91])
t_eu001 = array('H', [47, 265, 51, 54, 51, 108, 51, 263, 51, 2053, 51, 11647, 100, 109])
t_eu002 = array('H', [43, 206, 46, 204, 46, 456, 46, 3488])
t_eu004 = array('H', [44, 45, 44, 131, 44, 7462, 346, 176, 346, 178])
t_eu005 = array('H', [24, 190, 25, 80, 25, 190, 25, 4199, 25, 4799])
t_eu006 = array('H', [53, 63, 53, 172, 53, 4472, 54, 0, 455, 468])
t_eu007 = array('H', [50, 54, 50, 159, 50, 2307, 838, 422])
t_eu012 = array('H', [46, 206, 46, 459, 46, 3447])
t_eu013 = array('H', [53, 59, 53, 171, 53, 2302, 895, 449])
t_eu015 = array('H', [53, 54, 53, 156, 53, 2542, 851, 425, 853, 424])
t_eu016 = array('H', [28, 92, 28, 213, 28, 214, 28, 2771])
t_eu017 = array('H', [15, 844, 16, 557, 16, 844, 16, 5224])
t_eu019 = array('H', [50, 54, 50, 158, 50, 418, 50, 2443, 843, 418])
t_eu020 = array('H', [48, 301, 48, 651, 48, 1001, 48, 3001])
t_eu025 = array('H', [49, 52, 49, 102, 49, 250, 49, 252, 49, 2377, 49, 12009, 100, 52, 100, 102])
t_eu026 = array('H', [14, 491, 14, 743, 14, 4926])
t_eu028 = array('H', [47, 267, 50, 55, 50, 110, 50, 265, 50, 2055, 50, 12117, 100, 57])
t_eu029 = array('H', [50, 50, 50, 99, 50, 251, 50, 252, 50, 1445, 50, 11014, 102, 49, 102, 98])
t_eu031 = array('H', [53, 53, 53, 160, 53, 1697, 838, 422])
t_eu032 = array('H', [49, 205, 49, 206, 49, 456, 49, 3690])
t_eu033 = array('H', [48, 150, 50, 149, 50, 347, 50, 2936])
t_eu037 = array('H', [14, 491, 14, 743, 14, 5178])
t_eu038 = array('H', [3, 1002, 3, 1495, 3, 3059])
t_eu039 = array('H', [13, 445, 13, 674, 13, 675, 13, 4583])
t_eu040 = array('H', [85, 89, 85, 264, 85, 3402, 347, 350, 348, 350])
t_eu041 = array('H', [46, 300, 49, 298, 49, 648, 49, 997, 49, 3056])
t_eu043 = array('H', [1037, 4216, 1040, 0])
t_eu045 = array('H', [152, 471, 154, 156, 154, 469, 154, 2947])
t_eu046 = array('H', [15, 493, 16, 493, 16, 698, 16, 1414])
t_eu047 = array('H', [3, 496, 3, 745, 3, 1488])
t_eu049 = array('H', [55, 55, 55, 167, 55, 4577, 55, 9506, 448, 445, 450, 444])
t_eu050 = array('H', [91, 88, 91, 267, 91, 3621, 361, 358, 361, 359])
t_eu051 = array('H', [84, 88, 84, 261, 84, 3360, 347, 347, 347, 348])
t_eu052 = array('H', [16, 838, 17, 558, 17, 839, 17, 6328])
t_eu054 = array('H', [49, 53, 49, 104, 49, 262, 49, 264, 49, 8030, 100, 103])
t_eu056 = array('H', [112, 107, 113, 107, 677, 2766])
t_eu059 = array('H', [310, 613, 310, 614, 622, 8312])
t_eu060 = array('H', [50, 158, 53, 51, 53, 156, 53, 2180])
t_eu064 = array('H', [47, 267, 50, 55, 50, 110, 50, 265, 50, 2055, 50, 12117, 100, 57, 100, 112])
t_eu065 = array('H', [47, 267, 50, 55, 50, 110, 50, 265, 50, 2055, 50, 12117, 100, 112])
t_eu067 = array('H', [94, 473, 94, 728, 102, 1637])
t_eu068 = array('H', [49, 263, 50, 54, 50, 108, 50, 263, 50, 2029, 50, 10199, 100, 110])
t_eu069 = array('H', [4, 499, 4, 750, 4, 4999])
t_eu071 = array('H', [14, 491, 14, 743, 14, 4422])
t_eu072 = array('H', [5, 568, 5, 854, 5, 4999])
t_eu075 = array('H', [6, 566, 6, 851, 6, 5474])
t_eu076 = array('H', [14, 843, 16, 555, 16, 841, 16, 4911])
t_eu078 = array('H', [6, 925, 6, 1339, 6, 2098, 6, 2787])
t_eu079 = array('H', [53, 59, 53, 170, 53, 4359, 892, 448, 893, 448])
t_eu080 = array('H', [55, 57, 55, 167, 55, 4416, 895, 448, 897, 447])
t_eu081 = array('H', [26, 185, 27, 80, 27, 185, 27, 4249])
t_eu082 = array('H', [51, 56, 51, 162, 51, 2842, 848, 430, 850, 429])
t_eu083 = array('H', [16, 559, 16, 847, 16, 5900, 17, 559, 17, 847])
t_eu084 = array('H', [16, 484, 16, 738, 16, 739, 16, 4795])
t_eu085 = array('H', [48, 52, 48, 160, 48, 400, 48, 2120, 799, 400])
t_eu086 = array('H', [16, 851, 17, 554, 17, 850, 17, 851, 17, 4847])
t_eu087 = array('H', [14, 491, 14, 743, 14, 5126])
t_eu088 = array('H', [14, 491, 14, 743, 14, 4874])
t_eu090 = array('H', [3, 9, 3, 19, 3, 29, 3, 39, 3, 9968])
t_eu091 = array('H', [15, 138, 15, 446, 15, 605, 15, 6565])
t_eu092 = array('H', [48, 50, 48, 148, 48, 149, 48, 1424])
t_eu093 = array('H', [87, 639, 88, 275, 88, 639])
t_eu094 = array('H', [3, 8, 3, 18, 3, 24, 3, 38, 3, 9969])
t_eu096 = array('H', [13, 608, 14, 141, 14, 296, 14, 451, 14, 606, 14, 608, 14, 6207])
t_eu098 = array('H', [3, 8, 3, 18, 3, 28, 3, 12731])
t_eu099 = array('H', [46, 53, 46, 106, 46, 260, 46, 1502, 46, 10962, 93, 53, 93, 106])
t_eu101 = array('H', [14, 491, 14, 743, 14, 4674])
t_eu103 = array('H', [44, 815, 45, 528, 45, 815, 45, 5000])
t_eu104 = array('H', [14, 491, 14, 743, 14, 5881])
t_eu106 = array('H', [48, 246, 50, 47, 50, 94, 50, 245, 50, 1488, 50, 10970, 100, 47, 100, 94])
t_eu107 = array('H', [16, 847, 16, 5900, 17, 559, 17, 846, 17, 847])
t_eu108 = array('H', [14, 491, 14, 743, 14, 4622])
t_eu109 = array('H', [24, 185, 27, 78, 27, 183, 27, 1542])
t_eu110 = array('H', [56, 55, 56, 168, 56, 4850, 447, 453, 448, 453])
t_eu111 = array('H', [49, 52, 49, 250, 49, 252, 49, 2377, 49, 12009, 100, 52, 100, 102])
t_eu112 = array('H', [55, 55, 55, 167, 55, 5023, 55, 9506, 448, 445, 450, 444])
t_eu115 = array('H', [48, 98, 48, 196, 97, 836, 395, 388, 1931, 389])
t_eu116 = array('H', [3, 9, 3, 31, 3, 42, 3, 10957])
t_eu117 = array('H', [49, 53, 49, 262, 49, 264, 49, 8030, 100, 103])
t_eu118 = array('H', [44, 815, 45, 528, 45, 815, 45, 4713])
t_eu119 = array('H', [14, 491, 14, 743, 14, 5430])
t_eu120 = array('H', [19, 78, 21, 27, 21, 77, 21, 3785, 22, 0])
t_eu123 = array('H', [13, 490, 13, 741, 13, 742, 13, 5443])
t_eu124 = array('H', [50, 54, 50, 158, 50, 407, 50, 2153, 843, 407])
t_eu125 = array('H', [55, 56, 55, 168, 55, 3929, 56, 0, 882, 454, 884, 452])
t_eu128 = array('H', [152, 471, 154, 156, 154, 469, 154, 782, 154, 2947])
t_eu129 = array('H', [50, 50, 50, 99, 50, 251, 50, 252, 50, 1449, 50, 11014, 102, 49, 102, 98])
t_eu131 = array('H', [14, 491, 14, 743, 14, 4170])
t_eu134 = array('H', [13, 490, 13, 741, 13, 742, 13, 5939])
t_eu135 = array('H', [6, 566, 6, 851, 6, 5188])
t_eu137 = array('H', [86, 91, 87, 90, 87, 180, 87, 8868, 88, 0, 174, 90])
t_eu138 = array('H', [4, 1036, 4, 1507, 4, 3005])
t_eu139 = array('H', [0, 0, 14, 141, 14, 452, 14, 607, 14, 6310])
t_na000 = array('H', [60, 60, 60, 2700, 120, 60, 240, 60])
t_na004 = array('H', [55, 57, 55, 170, 55, 3949, 55, 9623, 56, 0, 898, 453, 900, 226])
t_na005 = array('H', [88, 90, 88, 91, 88, 181, 88, 8976, 177, 91])
t_na009 = array('H', [53, 56, 53, 171, 53, 3950, 53, 9599, 898, 451, 900, 226])
t_na021 = array('H', [48, 52, 48, 160, 48, 400, 48, 2335, 799, 400])
t_na022 = array('H', [53, 60, 53, 175, 53, 4463, 53, 9453, 892, 450, 895, 225])
t_na031 = array('H', [88, 89, 88, 90, 88, 179, 88, 8977, 177, 90])
b_eu000 = bytes([0xA4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x64, 0x2C, 0x40, 0x80, 0x00, 0x00, 0x00, 0x06, 0x41])
b_eu001 = bytes([0x04, 0x92, 0x49, 0x26, 0x35, 0x89, 0x24, 0x9A, 0xD6, 0x24, 0x92, 0x48])
b_eu002 = bytes([0x1A, 0x56, 0xA6, 0xD6, 0x95, 0xA9, 0x90])
b_eu004 = bytes([0x60, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x12, 0x48, 0x04, 0x12, 0x48, 0x2A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x10, 0x49, 0x20, 0x10, 0x49, 0x20, 0x80])
b_eu005 = bytes([0x04, 0x92, 0x52, 0x28, 0x92, 0x8C, 0x44, 0x92, 0x89, 0x45, 0x24, 0x53, 0x44, 0x92, 0x52, 0x28, 0x92, 0x8C, 0x44, 0x92, 0x89, 0x45, 0x24, 0x51])
b_eu006 = bytes([0x84, 0x90, 0x00, 0x04, 0x90, 0x00, 0x00, 0x80, 0x00, 0x04, 0x12, 0x49, 0x2A, 0x12, 0x40, 0x00, 0x12, 0x40, 0x00, 0x02, 0x00, 0x00, 0x10, 0x49, 0x24, 0xB0])
b_eu007 = bytes([0xD4, 0x00, 0x15, 0x10, 0x25, 0x00, 0x05, 0x44, 0x09, 0x40, 0x01, 0x51, 0x01])
b_eu008 = bytes([0xA0, 0x00, 0x41, 0x04, 0x92, 0x08, 0x24, 0x90, 0x40, 0x00, 0x02, 0x09, 0x2B, 0x3D, 0x00])
b_eu011 = bytes([0x84, 0x00, 0x48, 0x04, 0x02, 0x01, 0x04, 0x80, 0x09, 0x00, 0x12, 0x40, 0x2A, 0xBA, 0x40])
b_eu012 = bytes([0x05, 0x01, 0x51, 0x81, 0x40, 0x54, 0x40])
b_eu013 = bytes([0xD4, 0x55, 0x00, 0x00, 0x40, 0x15, 0x54, 0x00, 0x01, 0x55, 0x56, 0xD4, 0x55, 0x00, 0x00, 0x40, 0x15, 0x54, 0x00, 0x01, 0x55, 0x55])
b_eu015 = bytes([0x60, 0x82, 0x08, 0x24, 0x10, 0x41, 0x00, 0x12, 0x40, 0x04, 0x80, 0x09, 0x2A, 0x02, 0x08, 0x20, 0x90, 0x41, 0x04, 0x00, 0x49, 0x00, 0x12, 0x00, 0x24, 0xA8, 0x08, 0x20, 0x82, 0x41, 0x04, 0x10, 0x01, 0x24, 0x00, 0x48, 0x00, 0x92, 0xA0, 0x20, 0x82, 0x09, 0x04, 0x10, 0x40, 0x04, 0x90, 0x01, 0x20, 0x02, 0x48])
b_eu016 = bytes([0x68, 0x08, 0x20, 0x00, 0xEA, 0x02, 0x08, 0x00, 0x10])
b_eu017 = bytes([0x1A, 0x9A, 0x9B, 0x9A, 0x9A, 0x99])
b_eu018 = bytes([0xA0, 0x02, 0x48, 0x04, 0x90, 0x01, 0x20, 0x12, 0x40, 0x04, 0x80, 0x09, 0x2B, 0x3D, 0x00])
b_eu019 = bytes([0x80, 0x80, 0x00, 0x08, 0x12, 0x40, 0x01, 0xC0, 0x40, 0x00, 0x04, 0x09, 0x20, 0x00, 0x00])
b_eu020 = bytes([0x22, 0x20, 0x00, 0x01, 0xC8, 0x88, 0x00, 0x00, 0x40])
b_eu021 = bytes([0x84, 0x80, 0x00, 0x20, 0x82, 0x49, 0x00, 0x02, 0x00, 0x04, 0x90, 0x49, 0x2A, 0xBA, 0x40])
b_eu022 = bytes([0xA4, 0x80, 0x41, 0x00, 0x12, 0x08, 0x24, 0x90, 0x40, 0x00, 0x02, 0x09, 0x2B, 0x3D, 0x00])
b_eu024 = bytes([0xA0, 0x02, 0x48, 0x04, 0x90, 0x01, 0x20, 0x00, 0x40, 0x04, 0x92, 0x09, 0x2B, 0x3D, 0x00])
b_eu025 = bytes([0x47, 0x00, 0x23, 0x3C, 0x01, 0x59, 0xE0, 0x04])
b_eu026 = bytes([0x55, 0x40, 0x42, 0x55, 0x40, 0x41])
b_eu027 = bytes([0xA0, 0x82, 0x08, 0x24, 0x10, 0x41, 0x04, 0x10, 0x01, 0x20, 0x82, 0x48, 0x0B, 0x3D, 0x00])
b_eu028 = bytes([0x04, 0x92, 0x49, 0x26, 0x34, 0x72, 0x24, 0x9A, 0xD1, 0xC8, 0x92, 0x48])
b_eu029 = bytes([0x47, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x62, 0x00, 0xE0, 0x00, 0x2B, 0x23, 0x10, 0x07, 0x00, 0x00, 0x80])
b_eu030 = bytes([0xA0, 0x10, 0x00, 0x04, 0x82, 0x49, 0x20, 0x02, 0x00, 0x04, 0x90, 0x49, 0x2B, 0x3D, 0x00])
b_eu031 = bytes([0xD5, 0x50, 0x15, 0x11, 0x65, 0x54, 0x05, 0x44, 0x59, 0x55, 0x01, 0x51, 0x15])
b_eu032 = bytes([0x1A, 0x56, 0xA5, 0xD6, 0x95, 0xA9, 0x40])
b_eu033 = bytes([0x2A, 0x5D, 0xA9, 0x60])
b_eu034 = bytes([0xA0, 0x02, 0x40, 0x04, 0x90, 0x09, 0x20, 0x02, 0x00, 0x04, 0x90, 0x49, 0x2B, 0x3D, 0x00])
b_eu036 = bytes([0xA4, 0x00, 0x49, 0x00, 0x92, 0x00, 0x20, 0x02, 0x00, 0x04, 0x90, 0x49, 0x2B, 0x3D, 0x00])
b_eu037 = bytes([0x45, 0x50, 0x02, 0x45, 0x50, 0x01])
b_eu038 = bytes([0x05, 0x60, 0x54])
b_eu039 = bytes([0x6A, 0x82, 0x83, 0xAA, 0x82, 0x81])
b_eu040 = bytes([0x60, 0x90, 0x40, 0x20, 0x80, 0x40, 0x20, 0x90, 0x41, 0x2A, 0x02, 0x41, 0x00, 0x82, 0x01, 0x00, 0x82, 0x41, 0x04, 0x80])
b_eu041 = bytes([0x0C, 0xB2, 0xCA, 0x49, 0x13, 0x0B, 0x2C, 0xB2, 0x92, 0x44, 0xB0])
b_eu042 = bytes([0x80, 0x00, 0x00, 0x24, 0x92, 0x09, 0x00, 0x82, 0x00, 0x04, 0x10, 0x49, 0x2A, 0xBA, 0x00])
b_eu043 = bytes([0x10])
b_eu044 = bytes([0xA0, 0x02, 0x01, 0x04, 0x90, 0x48, 0x20, 0x00, 0x00, 0x04, 0x92, 0x49, 0x2B, 0x3D, 0x00])
b_eu045 = bytes([0x16, 0xE5, 0x90])
b_eu046 = bytes([0x16, 0xAB, 0x56, 0xA9])
b_eu047 = bytes([0x41, 0x24, 0x12, 0x41, 0x00])
b_eu048 = bytes([0x80, 0x00, 0x00, 0x24, 0x82, 0x49, 0x04, 0x80, 0x40, 0x00, 0x12, 0x09, 0x2A, 0xBA, 0x00])
b_eu049 = bytes([0x80, 0x92, 0x00, 0x00, 0x92, 0x00, 0x00, 0x10, 0x40, 0x04, 0x82, 0x09, 0x2A, 0x97, 0x48])
b_eu050 = bytes([0x60, 0x00, 0x00, 0x00, 0x12, 0x49, 0x24, 0x92, 0x42, 0x80, 0x00, 0x00, 0x00, 0x12, 0x49, 0x24, 0x92, 0x40])
b_eu051 = bytes([0x60, 0x82, 0x00, 0x20, 0x80, 0x41, 0x04, 0x90, 0x41, 0x2A, 0x02, 0x08, 0x00, 0x82, 0x01, 0x04, 0x12, 0x41, 0x04, 0x80])
b_eu052 = bytes([0x1A, 0x9A, 0x9B, 0x9A, 0x9A, 0x99])
b_eu053 = bytes([0x26, 0xAB, 0x66, 0xAA])
b_eu054 = bytes([0x40, 0x1A, 0x23, 0x00, 0xD0, 0x80])
b_eu055 = bytes([0x80, 0x00, 0x00, 0x20, 0x92, 0x49, 0x00, 0x02, 0x40, 0x04, 0x90, 0x09, 0x2A, 0xBA, 0x00])
b_eu056 = bytes([0x26])
b_eu058 = bytes([0x80, 0x00, 0x00, 0x24, 0x10, 0x49, 0x00, 0x82, 0x00, 0x04, 0x10, 0x49, 0x2A, 0xBA, 0x00])
b_eu059 = bytes([0x26])
b_eu060 = bytes([0x25, 0x59, 0x9A, 0x5A, 0xE9, 0x56, 0x66, 0x96, 0xA0])
b_eu061 = bytes([0x10, 0x92, 0x54, 0x24, 0xB3, 0x09, 0x25, 0x42, 0x48])
b_eu062 = bytes([0x25, 0x99, 0x9A, 0x5A, 0xE9, 0x66, 0x66, 0x96, 0xA0])
b_eu063 = bytes([0x80, 0x00, 0x00, 0x24, 0x90, 0x41, 0x00, 0x82, 0x00, 0x04, 0x10, 0x49, 0x2A, 0xBA, 0x00])
b_eu064 = bytes([0x04, 0x92, 0x49, 0x26, 0x32, 0x51, 0xCB, 0xD6, 0x4A, 0x39, 0x72])
b_eu065 = bytes([0x04, 0x92, 0x49, 0x26, 0x32, 0x4A, 0x38, 0x9A, 0xC9, 0x28, 0xE2, 0x48])
b_eu066 = bytes([0x84, 0x82, 0x00, 0x04, 0x82, 0x00, 0x00, 0x82, 0x00, 0x04, 0x10, 0x49, 0x2A, 0x87, 0x41])
b_eu067 = bytes([0x41, 0x24, 0x12])
b_eu068 = bytes([0x04, 0x92, 0x49, 0x26, 0x34, 0x49, 0x38, 0x9A, 0xD1, 0x24, 0xE2, 0x48])
b_eu069 = bytes([0x05, 0x54, 0x06, 0x05, 0x54, 0x04])
b_eu070 = bytes([0x14, 0x54, 0x06, 0x14, 0x54, 0x04])
b_eu071 = bytes([0x45, 0x44, 0x56, 0x45, 0x44, 0x55])
b_eu072 = bytes([0x55, 0x45, 0x46, 0x55, 0x45, 0x44])
b_eu073 = bytes([0x19, 0x57, 0x59, 0x55])
b_eu074 = bytes([0x04, 0x92, 0x49, 0x28, 0xC6, 0x49, 0x24, 0x92, 0x51, 0x80])
b_eu075 = bytes([0x05, 0x45, 0x46, 0x05, 0x45, 0x44])
b_eu076 = bytes([0x2A, 0x9A, 0x9B, 0xAA, 0x9A, 0x9A])
b_eu077 = bytes([0x04, 0x92, 0x49, 0x26, 0x32, 0x51, 0xC8, 0x9A, 0xC9, 0x47, 0x22, 0x48])
b_eu078 = bytes([0x90, 0x0D, 0x00])
b_eu079 = bytes([0x60, 0x00, 0x00, 0x24, 0x80, 0x09, 0x04, 0x92, 0x00, 0x00, 0x00, 0x49, 0x2A, 0x00, 0x00, 0x00, 0x92, 0x00, 0x24, 0x12, 0x48, 0x00, 0x00, 0x01, 0x24, 0x80])
b_eu080 = bytes([0x60, 0x00, 0x00, 0x20, 0x10, 0x09, 0x04, 0x02, 0x01, 0x00, 0x90, 0x48, 0x2A, 0x00, 0x00, 0x00, 0x80, 0x40, 0x24, 0x10, 0x08, 0x04, 0x02, 0x41, 0x20, 0x80])
b_eu081 = bytes([0x1A, 0x5A, 0x65, 0x67, 0x9A, 0x65, 0x9A, 0x9B, 0x9A, 0x5A, 0x65, 0x67, 0x9A, 0x65, 0x9A, 0x9B, 0x9A, 0x5A, 0x65, 0x65])
b_eu082 = bytes([0x60, 0x82, 0x08, 0x24, 0x10, 0x41, 0x04, 0x82, 0x40, 0x00, 0x10, 0x09, 0x2A, 0x02, 0x08, 0x20, 0x90, 0x41, 0x04, 0x12, 0x09, 0x00, 0x00, 0x40, 0x24, 0x80])
b_eu083 = bytes([0x0E, 0x38, 0x21, 0x82, 0x26, 0x20, 0x82, 0x48, 0x23])
b_eu084 = bytes([0x6A, 0xA0, 0x03, 0xAA, 0xA0, 0x01])
b_eu085 = bytes([0x84, 0x82, 0x40, 0x08, 0x92, 0x48, 0x01, 0xC2, 0x41, 0x20, 0x04, 0x49, 0x24, 0x00, 0x40])
b_eu086 = bytes([0x45, 0x86, 0x5B, 0x05, 0xC6, 0x5B, 0x05, 0xB0, 0x42])
b_eu087 = bytes([0x55, 0x50, 0x02, 0x55, 0x50, 0x01])
b_eu088 = bytes([0x45, 0x54, 0x42, 0x45, 0x54, 0x41])
b_eu089 = bytes([0x84, 0x10, 0x40, 0x08, 0x82, 0x08, 0x01, 0xC2, 0x08, 0x20, 0x04, 0x41, 0x04, 0x00, 0x40])
b_eu090 = bytes([0x60, 0x00, 0x88, 0x00, 0x02, 0xE3, 0x00, 0x04, 0x40, 0x00, 0x16])
b_eu091 = bytes([0x80, 0x01, 0x00, 0x2E, 0x00, 0x04, 0x00, 0xA0])
b_eu092 = bytes([0x48, 0x80, 0x0E, 0x22, 0x00, 0x10])
b_eu093 = bytes([0x15, 0x9A, 0x94])
b_eu094 = bytes([0x60, 0x80, 0x88, 0x00, 0x00, 0xE3, 0x04, 0x04, 0x40, 0x00, 0x06])
b_eu095 = bytes([0x2A, 0xAB, 0x6A, 0xAA])
b_eu096 = bytes([0x04, 0x94, 0x4B, 0x24, 0x95, 0x35, 0x24, 0xA2, 0x59, 0x24, 0xA8, 0x40])
b_eu097 = bytes([0x19, 0xAB, 0x59, 0xA9])
b_eu098 = bytes([0x80, 0x01, 0x00, 0xB8, 0x55, 0x10, 0x08])
b_eu099 = bytes([0x46, 0x80, 0x00, 0x00, 0x00, 0x03, 0x44, 0x52, 0x00, 0x00, 0x0C, 0x22, 0x22, 0x90, 0x00, 0x00, 0x60, 0x80])
b_eu100 = bytes([0x80, 0x04, 0x00, 0xB8, 0x55, 0x40, 0x08])
b_eu101 = bytes([0x55, 0x50, 0x06, 0x55, 0x50, 0x05])
b_eu102 = bytes([0x45, 0x54, 0x02, 0x45, 0x54, 0x01])
b_eu103 = bytes([0x29, 0x9A, 0x9B, 0xA9, 0x9A, 0x9A])
b_eu104 = bytes([0x44, 0x40, 0x02, 0x44, 0x40, 0x01])
b_eu105 = bytes([0x84, 0x10, 0x00, 0x20, 0x90, 0x01, 0x00, 0x80, 0x40, 0x04, 0x12, 0x09, 0x2A, 0xBA, 0x40])
b_eu106 = bytes([0x0B, 0x12, 0x49, 0x24, 0x92, 0x49, 0x8D, 0x1C, 0x89, 0x27, 0xFC, 0xAB, 0x47, 0x22, 0x49, 0xFF, 0x2A, 0xD1, 0xC8, 0x92, 0x7F, 0xC9, 0x00])
b_eu107 = bytes([0x62, 0x08, 0xA0, 0x8A, 0x19, 0x04, 0x08, 0x40, 0x83])
b_eu108 = bytes([0x45, 0x54, 0x16, 0x45, 0x54, 0x15])
b_eu109 = bytes([0x19, 0x95, 0x5E, 0x66, 0x55, 0x50])
b_eu110 = bytes([0x64, 0x10, 0x00, 0x04, 0x10, 0x00, 0x00, 0x80, 0x00, 0x04, 0x12, 0x49, 0x2A, 0x10, 0x40, 0x00, 0x10, 0x40, 0x00, 0x02, 0x00, 0x00, 0x10, 0x49, 0x24, 0x90])
b_eu111 = bytes([0x22, 0x80, 0x1A, 0x18, 0x01, 0x10, 0xC0, 0x02])
b_eu112 = bytes([0x80, 0x02, 0x00, 0x00, 0x02, 0x00, 0x04, 0x92, 0x00, 0x00, 0x00, 0x49, 0x2A, 0x97, 0x48])
b_eu113 = bytes([0x46, 0x80, 0x23, 0x34, 0x00, 0x80])
b_eu114 = bytes([0x04, 0x92, 0x49, 0x26, 0x34, 0x71, 0x44, 0x9A, 0xD1, 0xC5, 0x12, 0x48])
b_eu115 = bytes([0x84, 0x92, 0x01, 0x24, 0x12, 0x00, 0x04, 0x80, 0x08, 0x09, 0x92, 0x48, 0x04, 0x90, 0x48, 0x00, 0x12, 0x00, 0x20, 0x26, 0x49, 0x20, 0x12, 0x41, 0x20, 0x00, 0x48, 0x00, 0x82])
b_eu116 = bytes([0x80, 0x01, 0x00, 0x2E, 0x00, 0x04, 0x00, 0x80])
b_eu117 = bytes([0x22, 0x00, 0x1A, 0x10, 0x00, 0x40])
b_eu118 = bytes([0x2A, 0x9A, 0x9B, 0xAA, 0x9A, 0x9A])
b_eu119 = bytes([0x44, 0x44, 0x02, 0x44, 0x44, 0x01])
b_eu120 = bytes([0x09, 0x24, 0x92, 0x49, 0x12, 0x4A, 0x24, 0x92, 0x49, 0x24, 0x92, 0x49, 0x24, 0x94, 0x89, 0x69, 0x24, 0x92, 0x49, 0x22, 0x49, 0x44, 0x92, 0x49, 0x24, 0x92, 0x49, 0x24, 0x92, 0x91, 0x30])
b_eu121 = bytes([0x64, 0x00, 0x09, 0x24, 0x00, 0x09, 0x24, 0x00, 0x09, 0x2A, 0x10, 0x00, 0x24, 0x90, 0x00, 0x24, 0x90, 0x00, 0x24, 0x90])
b_eu122 = bytes([0x04, 0xA4, 0x92, 0x49, 0x22, 0x49, 0x48, 0x92, 0x49, 0x24, 0x92, 0x49, 0x24, 0x94, 0x89, 0x68, 0x94, 0x92, 0x49, 0x24, 0x49, 0x29, 0x12, 0x49, 0x24, 0x92, 0x49, 0x24, 0x92, 0x91, 0x30])
b_eu123 = bytes([0x6A, 0xA0, 0x0B, 0xAA, 0xA0, 0x09])
b_eu124 = bytes([0x80, 0x10, 0x40, 0x08, 0x92, 0x48, 0x01, 0xC0, 0x08, 0x20, 0x04, 0x49, 0x24, 0x00, 0x00])
b_eu125 = bytes([0x84, 0x80, 0x00, 0x20, 0x82, 0x49, 0x00, 0x02, 0x00, 0x04, 0x90, 0x49, 0x2A, 0x92, 0x00, 0x00, 0x82, 0x09, 0x24, 0x00, 0x08, 0x00, 0x12, 0x41, 0x24, 0xB0])
b_eu126 = bytes([0xA0, 0x00, 0x00, 0x04, 0x92, 0x49, 0x20, 0x00, 0x00, 0x04, 0x92, 0x49, 0x2B, 0x3D, 0x00])
b_eu127 = bytes([0x44, 0x40, 0x56, 0x44, 0x40, 0x55])
b_eu128 = bytes([0x05, 0xC4, 0x59])
b_eu129 = bytes([0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x8C, 0x40, 0x03, 0xF1, 0xEB, 0x23, 0x10, 0x00, 0xFC, 0x74])
b_eu130 = bytes([0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x8C, 0x40, 0x03, 0xE3, 0xEB, 0x23, 0x10, 0x00, 0xF8, 0xF4])
b_eu131 = bytes([0x55, 0x55, 0x42, 0x55, 0x55, 0x41])
b_eu132 = bytes([0x05, 0x50, 0x06, 0x05, 0x50, 0x04])
b_eu133 = bytes([0x55, 0x54, 0x12, 0x55, 0x54, 0x11])
b_eu134 = bytes([0x40, 0x0A, 0x83, 0x80, 0x0A, 0x81])
b_eu135 = bytes([0x54, 0x45, 0x46, 0x54, 0x45, 0x44])
b_eu136 = bytes([0xA0, 0x00, 0x00, 0x04, 0x92, 0x49, 0x24, 0x00, 0x00, 0x00, 0x92, 0x49, 0x2B, 0x3D, 0x00])
b_eu137 = bytes([0x14, 0x95, 0x4A, 0x35, 0x9A, 0x4A, 0xA5, 0x1B, 0x00])
b_eu138 = bytes([0x05, 0x60, 0x54])
b_eu139 = bytes([0x64, 0x92, 0x4A, 0x24, 0x92, 0xE3, 0x24, 0x92, 0x51, 0x24, 0x96, 0x00])
b_na000 = bytes([0xE2, 0x20, 0x80, 0x78, 0x88, 0x20, 0x10])
b_na004 = bytes([0xA0, 0x00, 0x01, 0x04, 0x92, 0x48, 0x20, 0x80, 0x40, 0x04, 0x12, 0x09, 0x2B, 0x3D, 0x00])
b_na005 = bytes([0x10, 0x92, 0x49, 0x46, 0x33, 0x09, 0x24, 0x94, 0x60])
b_na021 = bytes([0x80, 0x10, 0x40, 0x08, 0x82, 0x08, 0x01, 0xC0, 0x08, 0x20, 0x04, 0x41, 0x04, 0x00, 0x00])
b_na022 = bytes([0x80, 0x02, 0x40, 0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x24, 0x92, 0x48, 0x0A, 0xBA, 0x00])

EUCODES = (
    (35714, 40, 3, t_eu000, b_eu000),
    (30303, 31, 3, t_eu001, b_eu001),
    (33333, 26, 2, t_eu002, b_eu002),
    (38400, 26, 2, t_na000, b_na000),
    (37037, 100, 3, t_eu004, b_eu004),
    (38610, 64, 3, t_eu005, b_eu005),
    (38462, 68, 3, t_eu006, b_eu006),
    (38462, 52, 2, t_eu007, b_eu007),
    (38462, 38, 3, t_na004, b_eu008),
    (35714, 24, 3, t_na005, b_na005),
    (38610, 38, 3, t_na004, b_na004),
    (38462, 38, 3, t_na009, b_eu011),
    (33445, 26, 2, t_eu012, b_eu012),
    (38462, 88, 2, t_eu013, b_eu013),
    (38462, 38, 3, t_na021, b_na021),
    (38462, 136, 3, t_eu015, b_eu015),
    (33333, 34, 2, t_eu016, b_eu016),
    (33333, 24, 2, t_eu017, b_eu017),
    (38462, 38, 3, t_na004, b_eu018),
    (38462, 38, 3, t_eu019, b_eu019),
    (35714, 34, 2, t_eu020, b_eu020),
    (38462, 38, 3, t_na009, b_eu021),
    (38462, 38, 3, t_na004, b_eu022),
    (38462, 38, 3, t_na022, b_na022),
    (38462, 38, 3, t_na004, b_eu024),
    (31250, 21, 3, t_eu025, b_eu025),
    (38462, 24, 2, t_eu026, b_eu026),
    (38462, 38, 3, t_na004, b_eu027),
    (30303, 31, 3, t_eu028, b_eu028),
    (34483, 46, 3, t_eu029, b_eu029),
    (38462, 38, 3, t_na004, b_eu030),
    (38462, 52, 2, t_eu031, b_eu031),
    (33333, 26, 2, t_eu032, b_eu032),
    (38462, 14, 2, t_eu033, b_eu033),
    (38462, 38, 3, t_na004, b_eu034),
    (38462, 38, 3, t_na004, b_eu036),
    (38462, 24, 2, t_eu037, b_eu037),
    (0, 11, 2, t_eu038, b_eu038),
    (40161, 24, 2, t_eu039, b_eu039),
    (35714, 52, 3, t_eu040, b_eu040),
    (33333, 28, 3, t_eu041, b_eu041),
    (38462, 38, 3, t_na009, b_eu042),
    (41667, 2, 2, t_eu043, b_eu043),
    (38462, 38, 3, t_na004, b_eu044),
    (41667, 10, 2, t_eu045, b_eu045),
    (34602, 16, 2, t_eu046, b_eu046),
    (0, 17, 2, t_eu047, b_eu047),
    (38462, 38, 3, t_na009, b_eu048),
    (38462, 40, 3, t_eu049, b_eu049),
    (33333, 48, 3, t_eu050, b_eu050),
    (38462, 52, 3, t_eu051, b_eu051),
    (31250, 24, 2, t_eu052, b_eu052),
    (34483, 16, 2, t_eu046, b_eu053),
    (31250, 14, 3, t_eu054, b_eu054),
    (38462, 38, 3, t_na009, b_eu055),
    (38462, 4, 2, t_eu056, b_eu056),
    (38462, 38, 3, t_na009, b_eu058),
    (41667, 4, 2, t_eu059, b_eu059),
    (38462, 34, 2, t_eu060, b_eu060),
    (35714, 24, 3, t_na005, b_eu061),
    (38462, 34, 2, t_eu060, b_eu062),
    (38462, 38, 3, t_na009, b_eu063),
    (30395, 29, 3, t_eu064, b_eu064),
    (30303, 31, 3, t_eu065, b_eu065),
    (38462, 40, 3, t_eu049, b_eu066),
    (38462, 12, 2, t_eu067, b_eu067),
    (38610, 31, 3, t_eu068, b_eu068),
    (0, 23, 2, t_eu069, b_eu069),
    (0, 23, 2, t_eu069, b_eu070),
    (38462, 24, 2, t_eu071, b_eu071),
    (0, 23, 2, t_eu072, b_eu072),
    (34483, 16, 2, t_eu046, b_eu073),
    (35714, 26, 3, t_na031, b_eu074),
    (0, 23, 2, t_eu075, b_eu075),
    (38462, 24, 2, t_eu076, b_eu076),
    (30303, 31, 3, t_eu028, b_eu077),
    (0, 12, 2, t_eu078, b_eu078),
    (38462, 68, 3, t_eu079, b_eu079),
    (38462, 68, 3, t_eu080, b_eu080),
    (38462, 80, 2, t_eu081, b_eu081),
    (40000, 68, 3, t_eu082, b_eu082),
    (33333, 24, 3, t_eu083, b_eu083),
    (38462, 24, 2, t_eu084, b_eu084),
    (38462, 38, 3, t_eu085, b_eu085),
    (33333, 24, 3, t_eu086, b_eu086),
    (38462, 24, 2, t_eu087, b_eu087),
    (38462, 24, 2, t_eu088, b_eu088),
    (38462, 38, 3, t_na021, b_eu089),
    (0, 29, 3, t_eu090, b_eu090),
    (38462, 30, 2, t_eu091, b_eu091),
    (40000, 22, 2, t_eu092, b_eu092),
    (35714, 11, 2, t_eu093, b_eu093),
    (0, 29, 3, t_eu094, b_eu094),
    (34483, 16, 2, t_eu046, b_eu095),
    (38462, 30, 3, t_eu096, b_eu096),
    (34483, 16, 2, t_eu046, b_eu097),
    (0, 27, 2, t_eu098, b_eu098),
    (35714, 46, 3, t_eu099, b_eu099),
    (0, 27, 2, t_eu098, b_eu100),
    (38462, 24, 2, t_eu101, b_eu101),
    (38462, 24, 2, t_eu087, b_eu102),
    (34483, 24, 2, t_eu103, b_eu103),
    (38462, 24, 2, t_eu104, b_eu104),
    (38610, 38, 3, t_na009, b_eu105),
    (38462, 59, 3, t_eu106, b_eu106),
    (33333, 24, 3, t_eu107, b_eu107),
    (38462, 24, 2, t_eu108, b_eu108),
    (38462, 22, 2, t_eu109, b_eu109),
    (38462, 68, 3, t_eu110, b_eu110),
    (31250, 21, 3, t_eu111, b_eu111),
    (38462, 40, 3, t_eu112, b_eu112),
    (31250, 14, 3, t_eu054, b_eu113),
    (30303, 31, 3, t_eu028, b_eu114),
    (58824, 77, 3, t_eu115, b_eu115),
    (0, 29, 2, t_eu116, b_eu116),
    (31250, 14, 3, t_eu117, b_eu117),
    (34483, 24, 2, t_eu118, b_eu118),
    (38462, 24, 2, t_eu119, b_eu119),
    (38462, 82, 3, t_eu120, b_eu120),
    (38462, 52, 3, t_eu051, b_eu121),
    (38462, 82, 3, t_eu120, b_eu122),
    (40000, 24, 2, t_eu123, b_eu123),
    (38462, 38, 3, t_eu124, b_eu124),
    (38462, 68, 3, t_eu125, b_eu125),
    (38462, 38, 3, t_na004, b_eu126),
    (38462, 24, 2, t_eu087, b_eu127),
    (41667, 8, 3, t_eu128, b_eu128),
    (38462, 45, 3, t_eu129, b_eu129),
    (38462, 45, 3, t_eu129, b_eu130),
    (38462, 24, 2, t_eu131, b_eu131),
    (0, 23, 2, t_eu069, b_eu132),
    (38462, 24, 2, t_eu071, b_eu133),
    (40000, 24, 2, t_eu134, b_eu134),
    (0, 23, 2, t_eu135, b_eu135),
    (38462, 38, 3, t_na004, b_eu136),
    (35714, 22, 3, t_eu137, b_eu137),
    (0, 11, 2, t_eu138, b_eu138),
    (0, 30, 3, t_eu139, b_eu139),
)

class App:
    def __init__(self):
        self.name = 'tv_off'
        self.icon = 'tv_off.bmp'
        self.app = None
        self._bg = 0x000000
        self._fg = 0xffffff

    def start(self, app):
        w, h = _lcd_screensize()
        bar_w = min(200, w - 40)
        bar_h = 18
        x = (w - bar_w) // 2+20
        y = (h - bar_h) // 2+30
        _lcd_text(x, y-20, "Press Ok", 0xffffff)
        
        
        self.app = app
        self.app.callback_table['ok'] = self.start_send

    def start_send(self):
        try:
            progress_init(len(EUCODES), bg=self._bg, fg=self._fg)
            send_all(progress_cb=progress_update)
            progress_finish(ok=True)
        except Exception:
            try:
                progress_finish(ok=False)
            except Exception:
                pass
            raise

    def stop(self):
        self.app.loop_callback = None
        self.app.stop_app()
